From 237da167cacd3397885a718645d16b518669ba49 Mon Sep 17 00:00:00 2001
From: Joonas Koivunen <joonas.koivunen@gmail.com>
Date: Wed, 17 Jun 2020 14:08:03 +0300
Subject: [PATCH 3/4] cat tests per https://github.com/ipfs/js-ipfs/pull/3078

---
 packages/interface-ipfs-core/src/cat.js | 15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git a/packages/interface-ipfs-core/src/cat.js b/packages/interface-ipfs-core/src/cat.js
index 42e8cacd..de7c83d4 100644
--- a/packages/interface-ipfs-core/src/cat.js
+++ b/packages/interface-ipfs-core/src/cat.js
@@ -6,6 +6,7 @@ const CID = require('cids')
 const concat = require('it-concat')
 const all = require('it-all')
 const { getDescribe, getIt, expect } = require('./utils/mocha')
+const importer = require('ipfs-unixfs-importer')
 
 /** @typedef { import("ipfsd-ctl/src/factory") } Factory */
 /**
@@ -26,8 +27,8 @@ module.exports = (common, options) => {
     after(() => common.clean())
 
     before(() => Promise.all([
-      all(ipfs.add(fixtures.smallFile.data)),
-      all(ipfs.add(fixtures.bigFile.data))
+      all(importer([{ content: fixtures.smallFile.data }], ipfs.block)),
+      all(importer([{ content: fixtures.bigFile.data }], ipfs.block))
     ]))
 
     it('should cat with a base58 string encoded multihash', async () => {
@@ -52,7 +53,7 @@ module.exports = (common, options) => {
     it('should cat a file added as CIDv0 with a CIDv1', async () => {
       const input = Buffer.from(`TEST${Math.random()}`)
 
-      const res = await all(ipfs.add(input, { cidVersion: 0 }))
+      const res = await all(importer([{ content: input }], ipfs.block))
 
       const cidv0 = res[0].cid
       expect(cidv0.version).to.equal(0)
@@ -66,7 +67,7 @@ module.exports = (common, options) => {
     it('should cat a file added as CIDv1 with a CIDv0', async () => {
       const input = Buffer.from(`TEST${Math.random()}`)
 
-      const res = await all(ipfs.add(input, { cidVersion: 1, rawLeaves: false }))
+      const res = await all(importer([{ content: input }], ipfs.block, { cidVersion: 1, rawLeaves: false }))
 
       const cidv1 = res[0].cid
       expect(cidv1.version).to.equal(1)
@@ -93,7 +94,7 @@ module.exports = (common, options) => {
     it('should cat with IPFS path, nested value', async () => {
       const fileToAdd = { path: 'a/testfile.txt', content: fixtures.smallFile.data }
 
-      const filesAdded = await all(ipfs.add([fileToAdd]))
+      const filesAdded = await all(importer([fileToAdd], ipfs.block))
 
       const file = await filesAdded.find((f) => f.path === 'a')
       expect(file).to.exist()
@@ -106,7 +107,7 @@ module.exports = (common, options) => {
     it('should cat with IPFS path, deeply nested value', async () => {
       const fileToAdd = { path: 'a/b/testfile.txt', content: fixtures.smallFile.data }
 
-      const filesAdded = await all(ipfs.add([fileToAdd]))
+      const filesAdded = await all(importer([fileToAdd], ipfs.block))
 
       const file = filesAdded.find((f) => f.path === 'a')
       expect(file).to.exist()
@@ -134,7 +135,7 @@ module.exports = (common, options) => {
     it('should error on dir path', async () => {
       const file = { path: 'dir/testfile.txt', content: fixtures.smallFile.data }
 
-      const filesAdded = await all(ipfs.add([file]))
+      const filesAdded = await all(importer([file], ipfs.block))
       expect(filesAdded.length).to.equal(2)
 
       const files = filesAdded.filter((file) => file.path === 'dir')
-- 
2.20.1

